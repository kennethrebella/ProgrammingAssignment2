paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X","Y","Z" sep =''))
paste(c(1:3), c("X","Y","Z"), sep ="")
paster(LETTERS, 1:4, sep= "-")
paste(LETTERS, 1:4, sep= "-")
x <- c(44,NA,5,NA)
X*3
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf -Inf
x
x[1:10]
x[is.na(x)]
y<- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x > 0]
c(x[3],x[5],x[7])
x[c(3,5,7)]
x[0]
x[3000]
x[x(-2,-10)]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar =2, norf =NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, 4, 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames)
colnames(my_data) <- cnames
my_data
T == T
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6 <7
10<-10
10<=10
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 >8 || 6!=8 &&4>3.9
isTRUE(6>4)
identical('twins','twins')
xor( 5==6, !False)
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints < 0)
all( ints >0)
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_funtion
boring_function
sumbit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainde(11,5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div =2)
args(remainder)
submit()
sd(c(1.4,3.6,7.9,8.8))
evaluate( sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Fart")
submit
()
sumbit()
submit()
telegram("Fart")
submit
submit()
mad_libs(place = Des Moines, adjective = farty, noun = carrot)
mad_libs(Des Moines, Farty, Carrot)
mad_libs("DesMoines", "Farty", "Carrot")
submit()
submit()
submit()
submit()
'Hello' %p% "student!"
'Hello' %p% "student!"
submit()
'Hello' %p% "student!"
q()
library()
library(swirl)
swirl()
submit()
'I'%p% 'love' %p% 'R!'
head(flags)
dim(flags)
class(flags)
cls_list<- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags)
?sapply
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flass$orange)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_color,sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$landmasses, flags$population, summary)
help
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob =0.7)
flips2
sum(flips2)
rnorm
?rnorm
rnorm(10)
rnorm(10, mean=100, sd = 25)
?rpois
rpois(5)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t!
t1
class(t1)
unclass(t1)
t2<- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
?strptime
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
quit()
library(swirl)
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
sumbit()
submit()
my_mean(c(4,5,10))
submit)
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num =5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Willie,"Mae", "smells")
telegram("willie", "Mae", "smells")
quit()
a <- available.packages()
head(rownames(a),3)
install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data(iris)
?iris
head(iris)
iris[iris$Species == virginica]
iris[iris$Species == 'virginica']
iris[(iris$Species == 'virginica'),]
data <- iris[(iris$Species == 'virginica'),]
mean(data[,data[1]]
mean(data[,data[1]])
mean(data[,data[1]])
data[,1]
mean(data[,1])
apply(iris, 2, mean)
head(iris,1)
apply(iris[, 1:4], 2, mean)
data(mtcars)
?mtcars
cyl_to_hp <- tapply(mtcars$hp,mtcars$cyl, mean)
cyl_to_hp
cyl_to_hp$4
cyl_tohp[1]
cyl_to_hp[1]
cyl4 <- cyl_to_hp[1]
cyl8 <- cyl_to_hp[3]
?abs
abs(cyl4 - cyl8)
debug(ls)
ls
?ls
sum5 <- function(x) {
x <- x + 5
print(x)
}
sum5(4)
ls()
sum5 <- function(y) {
x <<- y + 5
print(x)
}
sum5(9)
ls()
rm(list=ls())
sum5 <- function(x) {
x <<- x + 5
print(x)
}
sum5(9)
cacheSet <- function(x = NULL) {
cache1 <- x
getfunction <- function() cache1
setfunction <- function(y = NULL) {
cache1 <<- y
}
list(get = getfunction, set = setfunction)
}
cacheGetSet <- function(cache, x = NULL, ...) {
cache2 <- cache$get()
message("Checking cache...")
if(is.null(cache2)) {
message("No previously cached value.")
} else {
print(cache2)
}
message("Setting new cached value...")
cache$set(x)
print(cache$get())
message("Finished.")
}
cache <- cacheSet(6)
cache
cacheGetSet(cache,5)
get <- function() x
get
x <- 3
get
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
makeCacheMatrix(a)
m
makeVector <- function(x = numeric()) {
m <- NULL
print(environment())
evn <- environment()
print(parent.env(evn))
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
getevn<- function() environment()
list(set = set, get = get,
setmean = setmean,
getmean = getmean,
getevn = getevn)
}
x <- 1:1000
x <- 1:10000
vec <- makeVector(x)
vec$getmean()
mx<- mean(x)
vec$setmean(mx)
vec$getmean()
vec$getevn()
ls(vec$getevn())
parent.env(vec$getevn())
ls(parent.env(vec$getevn()))
parent.env(vec$getevn())$m
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
##
cacheSolve <- function(x, ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
a
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve <- function(x, ...) {
m<-x$getmatrix()
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
cacheSolve(a)
source('~/Documents/Coursera/ProgrammingAssignment2/cachematrix.R')
a <- makeCacheMatrix()
a$set(matrix(1:9,3,3))
cacheSolve(a)
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
matrix(1:9, 3,3)
a$set(matrix(1:9,3,3))
cacheSolve(a)
a$set(matrix(1:14,4,4))
a$set(matrix(1:16,4,4))
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get, setmatrix=setmatrix, getmatrix=getmatrix)
}
## cacheSolve pulls up the
cacheSolve <- function(x, ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix
a$set(matrix(1:4,2,2))
a$set(matrix(1:4,2,2))
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
getwd()
setwd("~/Documents/Coursera/ProgrammingAssignment2")
library(swirl)
ls()
rm(list=ls())
library(swirl)
swirl()
plot()
q()
